name: Deploy to Kubernetes

on:
  push:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ 3.6, 3.7 ]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Setup Miniconda using Python ${{ matrix.python-version }}
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: lectify-backend
          environment-file: env.yml
          python-version: ${{ matrix.python-version }}
          auto-activate-base: false

      - name: Build
        shell: bash -l {0}
        run: |
          pip install -e .
      - name: Run tests
        shell: bash -l {0}
        run: |
          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    # Set env vars
    - name: Set env vars
      id: env-vars
      run: |
        if [ "${{ github.ref_name }}" == "main" ]; then
          echo "NAMESPACE=prod" >> $GITHUB_ENV
          echo "IMAGE=lectify-backend-prod:${{ github.sha }}" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" == "develop" ]; then
          echo "NAMESPACE=dev" >> $GITHUB_ENV
          echo "IMAGE=lectify-backend-dev:${{ github.sha }}" >> $GITHUB_ENV
        fi

    # Checkout the repository
    - name: Checkout Code
      uses: actions/checkout@v3

    # Log in to ACR
    - name: Log in to ACR
      uses: azure/docker-login@v1
      with:
        login-server: lectifycr.azurecr.io
        username: ${{ secrets.LECTIFYBACKEND_REGISTRY_USERNAME }}
        password: ${{ secrets.LECTIFYBACKEND_REGISTRY_PASSWORD }}

    # Build and push image
    - name: Build and Push Docker Image
      run: |
        docker build -t lectifycr.azurecr.io/$IMAGE .
        docker push lectifycr.azurecr.io/$IMAGE

    # create deployment
    - uses: actions-hub/kubectl@master
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      with: 
        args: set image deployment/lectify-backend lectify-backend=lectifycr.azurecr.io/${{ env.IMAGE }} -n ${{ env.NAMESPACE }}
